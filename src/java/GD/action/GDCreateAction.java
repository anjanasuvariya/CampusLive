/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GD.action;

import GD.model.ChatPad;
import common.helper.HibernateUtil;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.json.simple.JSONObject;
import placeComm.action.AppointmentDtlAction;

/**
 *
 * @author admin
 */
public class GDCreateAction extends org.apache.struts.action.Action {

    /* forward name="success" path="" */
    private final static Logger logger = Logger.getLogger(GDCreateAction.class.getName());

    /**
     * This is the action called from the Struts framework.
     *
     * @param mapping The ActionMapping used to select this instance.
     * @param form The optional ActionForm bean for this request.
     * @param request The HTTP Request we are processing.
     * @param response The HTTP Response we are processing.
     * @throws java.lang.Exception
     * @return
     */
    @Override
    public ActionForward execute(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response)
            throws Exception {
        try {
            String chatPadName = request.getParameter("gdSubject");
            String chatPadDesc = request.getParameter("gdDesc");

            logger.info("chat pad name........." + chatPadName);
            logger.info("chat Pad Desc........." + chatPadDesc);

            int gdId = insertGD_DB(new ChatPad(chatPadName, chatPadDesc));

            JSONObject jsonResult = new JSONObject();
            jsonResult.put("gdId", gdId);
            jsonResult.toJSONString();
            response.setContentType("application/json");
            System.out.println(jsonResult.toJSONString().toString());
            response.getWriter().write(jsonResult.toJSONString());
        } catch (Exception e) {
            logger.error("Error while saving chat pad details : " + e, e);
        }
        return null;
    }

    private int insertGD_DB(ChatPad chatPad) {

        SessionFactory factory = HibernateUtil.getSessionFactory();
        Session session = factory.openSession();

        Transaction tx = null;
        // Insert message with Pad ID 1 and User Id Generated by JavaScript ex.1
        try {
            tx = session.beginTransaction();
            //session.save(pad);
            //session.save(user);
            session.save(chatPad);
            System.out.println("PAD ID is +++ " + chatPad.getChatPadId());
            tx.commit();
            session.close();
            return chatPad.getChatPadId();
        } catch (Exception ex) {
            logger.error("Error while saving chat pad details : " + ex, ex);
            tx.rollback();
            session.close();
            ex.printStackTrace();
            return -1;
        }
    }
}
